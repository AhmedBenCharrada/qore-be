// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "qore-be/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// PersonRepository is an autogenerated mock type for the Repository type
type PersonRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *PersonRepository) Add(_a0 context.Context, _a1 dto.PersonDTO) (dto.PersonDTO, error) {
	ret := _m.Called(_a0, _a1)

	var r0 dto.PersonDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.PersonDTO) (dto.PersonDTO, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.PersonDTO) dto.PersonDTO); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(dto.PersonDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.PersonDTO) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: _a0, _a1, _a2
func (_m *PersonRepository) GetAll(_a0 context.Context, _a1 int, _a2 int) ([]dto.PersonDTO, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []dto.PersonDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]dto.PersonDTO, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []dto.PersonDTO); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.PersonDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *PersonRepository) GetByID(_a0 context.Context, _a1 int) (dto.PersonDTO, error) {
	ret := _m.Called(_a0, _a1)

	var r0 dto.PersonDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (dto.PersonDTO, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) dto.PersonDTO); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(dto.PersonDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPersonRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPersonRepository creates a new instance of PersonRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPersonRepository(t mockConstructorTestingTNewPersonRepository) *PersonRepository {
	mock := &PersonRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
